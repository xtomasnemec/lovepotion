# Dockerfile 
FROM devkitpro/devkitppc:latest

# Build type argument (Debug or Release)
ARG BUILD_TYPE=Debug

# Install dos2unix using apt-get (not dkp-pacman)
RUN apt-get update && apt-get install -y dos2unix

# Install build tools and git for wav2btsnd
RUN apt-get update && apt-get install -y git build-essential

# Install OpenJDK for wav2btsnd.jar
RUN apt-get update && apt-get install -y openjdk-11-jre-headless

# Download wav2btsnd.jar
RUN mkdir -p /opt/wav2btsnd && \
    wget -O /opt/wav2btsnd/wav2btsnd.jar https://bitbucket.org/timogus/wav2btsnd/raw/master/wav2btsnd.jar

RUN dkp-pacman -S --needed --noconfirm \
    wut-tools \
    wut \
    ppc-zlib \
    ppc-libpng \
    ppc-libjpeg-turbo \
    ppc-freetype \
    ppc-libogg \
    ppc-libvorbis \
    ppc-libvorbisidec \
    ppc-bzip2

WORKDIR /project

# Copy project
COPY . .

# Convert line endings and skip luasocket patches (luasocket is disabled for Wii U)
RUN find /project -name '*.cpp' -o -name '*.hpp' -o -name '*.c' -o -name '*.h' | xargs dos2unix || true

# Convert bootSound.wav to bootSound.btsnd if present
RUN if [ -f /project/platform/cafe/bootSound.wav ]; then \
    echo "=== Converting bootSound.wav to bootSound.btsnd using wav2btsnd.jar ===" && \
    java -jar /opt/wav2btsnd/wav2btsnd.jar /project/platform/cafe/bootSound.wav /project/platform/cafe/bootSound.btsnd; \
    else echo "No bootSound.wav found, skipping btsnd conversion."; fi

# Create game.zip before build (needed for fusing with executable)
RUN echo "=== Creating game.zip from game folder ===" && \
    mkdir -p /project/build && \
    cd /project/game && \
    zip -r /project/build/game.love . && \
    echo "=== game.love created successfully ===" && \
    ls -la /project/build/game.love

# Build
RUN mkdir -p build && cd build && \
    ls -lh /project/platform/cafe/ && \
    echo "=== Starting CMake configuration ===" && \
    cmake .. -DNINTENDO_WIIU=ON -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_TOOLCHAIN_FILE=$DEVKITPRO/cmake/WiiU.cmake && \
    echo "=== CMake configuration completed ===" && \
    echo "=== Starting make build ===" && \
    make -j$(nproc) || (echo "=== Make failed, showing build directory contents ===" && ls -la && exit 1) && \
    echo "=== Make build completed ===" && \
    echo "=== BUILD OUTPUT DEBUG ===" && \
    ls -la && \
    echo "=== FUSING GAME DATA INTO WUHB ===" && \
    if [ -f lovepotion.wuhb ] && [ -f /project/build/game.love ]; then \
        cat lovepotion.wuhb /project/build/game.love > balatro.wuhb && \
        echo "=== GAME FUSED SUCCESSFULLY ===" && \
        ls -la balatro.wuhb; \
    else \
        echo "=== FUSING FAILED - Missing files ==="; \
        echo "lovepotion.wuhb exists: $(test -f lovepotion.wuhb && echo yes || echo no)"; \
        echo "game.love exists: $(test -f /project/build/game.love && echo yes || echo no)"; \
    fi && \
    echo "=== FIND ALL RPX/WUHB/ELF FILES IN PROJECT ===" && \
    find /project -name "*.rpx" -o -name "*.wuhb" -o | head -20 && \
    echo "=== FIND ALL EXECUTABLE FILES ===" && \
    find /project -name "*lovepotion*" -type f | head -20 && \
    echo "=== COPYING FILES ===" && \
    mkdir -p /output && \
    find /project -name "balatro.wuhb" -exec cp -v {} /output/ \; && \
    cp -v balatro.wuhb /output/ 2>/dev/null || echo "balatro.wuhb not found" && \
    find /project -name "*lovepotion*" -type f -executable -exec cp -v {} /output/ \; 2>/dev/null || true && \
    echo "=== FINAL OUTPUT DIRECTORY ===" && \
    ls -la /output/ && \
    echo "=== FINAL BUILD DIRECTORY ===" && \
    ls -la /project/build/

# Export output directory
VOLUME ["/output"]
